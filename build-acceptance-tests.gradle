apply plugin: 'docker-compose'

configurations {
    acceptancetestCompile.extendsFrom testCompile
    acceptancetestRuntime.extendsFrom testRuntime
}

sourceSets {
    acceptancetest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            // Use "java" if you don't use Scala as a programming language
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptancetest.output.classesDir
    classpath = sourceSets.acceptancetest.runtimeClasspath
    outputs.upToDateWhen { false }

    // This is not needed, but I like to see which tests have run
    testLogging {
        events "passed", "skipped", "failed"
    }
}

acceptanceTest {
    useJUnit {
        includeCategories 'cabanas.garcia.ismael.dddinpractice.AcceptanceTest'
    }
}

dockerCompose.isRequiredBy(acceptanceTest)

dockerCompose {
    useComposeFiles = ['docker-compose.yml'] // like 'docker-compose -f <file>'
    captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
    stopContainers = true // doesn't call `docker-compose down` - useful for debugging
    removeContainers = true
}

acceptanceTest.doFirst {
    systemProperty 'postgres.host', dockerCompose.servicesInfos.postgresql.'postgresql_1'.host
    systemProperty 'postgres.port', dockerCompose.servicesInfos.postgresql.'postgresql_1'.port
}

acceptanceTest.mustRunAfter test