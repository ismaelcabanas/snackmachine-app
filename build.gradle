group 'cabanas.garcia.ismael.snackmachine'
version '0.0.1-SNAPSHOT'

buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath group: "com.avast.gradle", name: "docker-compose-gradle-plugin", version: "0.4.2"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'docker-compose'
apply plugin: 'org.springframework.boot'

apply from: 'build-static-code-analysis.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = 'Edgware.SR1'
}

configurations {
    integrationtestCompile.extendsFrom testCompile
    integrationtestRuntime.extendsFrom testRuntime
    acceptancetestCompile.extendsFrom testCompile
    acceptancetestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationtest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            // Use "java" if you don't use Scala as a programming language
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    acceptancetest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            // Use "java" if you don't use Scala as a programming language
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-jdbc")

    compile("org.apache.commons:commons-lang3:3.5")

    //flyway
    compile("org.flywaydb:flyway-core:4.2.0")

    // postgres
    compile('org.postgresql:postgresql:42.1.1') {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }

    // datasource
    compile("com.zaxxer:HikariCP:2.6.2")

    testCompile("junit:junit:4.12")
    testCompile("org.assertj:assertj-core:3.6.1")
    testCompile("org.mockito:mockito-core:2.10.0")
    testCompile("info.cukes:cucumber-java8:1.2.5")
    testCompile("info.cukes:cucumber-junit:1.2.5")
    testCompile("info.cukes:cucumber-spring:1.2.4")
    testCompile("pl.pragmatists:JUnitParams:1.1.0")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


// presentation of tests result
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    testLogging {
        // set options for log level LIFECYCLE
        events "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "short"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationtest.output.classesDir
    classpath = sourceSets.integrationtest.runtimeClasspath
    outputs.upToDateWhen { false }

    // This is not needed, but I like to see which tests have run
    testLogging {
        events "passed", "skipped", "failed"
    }
}

integrationTest {
    useJUnit {
        includeCategories 'cabanas.garcia.ismael.dddinpractice.IntegrationTest'
    }
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptancetest.output.classesDir
    classpath = sourceSets.acceptancetest.runtimeClasspath
    outputs.upToDateWhen { false }

    // This is not needed, but I like to see which tests have run
    testLogging {
        events "passed", "skipped", "failed"
    }
}

acceptanceTest {
    useJUnit {
        includeCategories 'cabanas.garcia.ismael.dddinpractice.AcceptanceTest'
    }
}

dockerCompose.isRequiredBy(integrationTest)
dockerCompose.isRequiredBy(acceptanceTest)

dockerCompose {
    useComposeFiles = ['docker-compose.yml'] // like 'docker-compose -f <file>'
    captureContainersOutput = true // prints output of all containers to Gradle output - very useful for debugging
    stopContainers = true // doesn't call `docker-compose down` - useful for debugging
    removeContainers = true
}

integrationTest.doFirst {
    systemProperty 'postgres.host', dockerCompose.servicesInfos.postgresql.'postgresql_1'.host
    systemProperty 'postgres.port', dockerCompose.servicesInfos.postgresql.'postgresql_1'.port
}

integrationTest.mustRunAfter test

bootRun.doFirst {
    systemProperty "spring.profiles.active", "dev"
}

// This disables the repackage that spring boot does, which is not a fully standard jar
bootRepackage {
    enabled = false
}